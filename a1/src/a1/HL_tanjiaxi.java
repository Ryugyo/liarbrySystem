/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package a1;
import javax.swing.JOptionPane;

import com.sun.istack.internal.logging.Logger;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

/**
 *
 * @author A
 */
public class HL_tanjiaxi extends javax.swing.JFrame {

    /**
     * Creates new form HL_tanjiaxi
     */
    public HL_tanjiaxi() {
    	Connection con = getConnection();
    	initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup = new javax.swing.ButtonGroup();
        parentPanel = new javax.swing.JPanel();
        cover = new javax.swing.JPanel();
        coverName = new javax.swing.JLabel();
        coverAuthor = new javax.swing.JLabel();
        BookPanel = new javax.swing.JPanel();
        bookName = new javax.swing.JTextField();
        ISBN = new javax.swing.JTextField();
        publisherName = new javax.swing.JTextField();
        editonNum = new javax.swing.JTextField();
        bookLabel = new javax.swing.JLabel();
        ISBNLabel = new javax.swing.JLabel();
        publisherLabel = new javax.swing.JLabel();
        editionLabel = new javax.swing.JLabel();
        authorLabel = new javax.swing.JLabel();
        authors = new javax.swing.JTextField();
        pageNum = new javax.swing.JTextField();
        pageLabel = new javax.swing.JLabel();
        pYearLabel = new javax.swing.JLabel();
        bYear = new javax.swing.JTextField();
        keywordLabel = new javax.swing.JLabel();
        keywords = new javax.swing.JTextArea();
        descriptionLabel = new javax.swing.JLabel();
        description = new javax.swing.JTextArea();
        bSubmit = new javax.swing.JButton();
        bCancel = new javax.swing.JButton();
        MusicPanel = new javax.swing.JPanel();
        diskName = new javax.swing.JTextField();
        diskNameLabel = new javax.swing.JLabel();
        micSubmit = new javax.swing.JButton();
        micCancel = new javax.swing.JButton();
        micYear = new javax.swing.JTextField();
        micPYearLabel = new javax.swing.JLabel();
        trackLabel = new javax.swing.JLabel();
        diskTypeLabel = new javax.swing.JLabel();
        diskType = new javax.swing.JTextField();
        trackName = new javax.swing.JTextField();
        lyricsLabel = new javax.swing.JLabel();
        lyrics = new javax.swing.JTextField();
        songWriterLabel = new javax.swing.JLabel();
        songWriter = new javax.swing.JTextField();
        songWriterLabel1 = new javax.swing.JLabel();
        diskProducer = new javax.swing.JTextField();
        diskComposer = new javax.swing.JTextField();
        arrangement = new javax.swing.JTextField();
        songWriterLabel2 = new javax.swing.JLabel();
        songWriterLabel3 = new javax.swing.JLabel();
        micPYearLabel1 = new javax.swing.JLabel();
        singer = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        MoviePanel = new javax.swing.JPanel();
        movieName = new javax.swing.JTextField();
        director = new javax.swing.JTextField();
        script = new javax.swing.JTextField();
        mProducer = new javax.swing.JTextField();
        movieNameLabel = new javax.swing.JLabel();
        directorLabel = new javax.swing.JLabel();
        scriptLabel = new javax.swing.JLabel();
        producerLabel = new javax.swing.JLabel();
        composerLabel = new javax.swing.JLabel();
        composer = new javax.swing.JTextField();
        editor = new javax.swing.JTextField();
        cast = new javax.swing.JTextField();
        costume = new javax.swing.JTextField();
        costumeLabel = new javax.swing.JLabel();
        releaseLabel = new javax.swing.JLabel();
        movYear = new javax.swing.JTextField();
        movSubmit = new javax.swing.JButton();
        movCancel = new javax.swing.JButton();
        editorLabel = new javax.swing.JLabel();
        castLabel = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        ViewPanel = new javax.swing.JPanel();
        viewName = new javax.swing.JTextField();
        viewNameLabel = new javax.swing.JLabel();
        viewPubYearLabel = new javax.swing.JLabel();
        viewYear = new javax.swing.JTextField();
        viewSubmit = new javax.swing.JButton();
        viewCancel = new javax.swing.JButton();
        bookRadio = new javax.swing.JRadioButton();
        musicRadio = new javax.swing.JRadioButton();
        movieRadio = new javax.swing.JRadioButton();
        viewPubYearLabel1 = new javax.swing.JLabel();
        reportName = new javax.swing.JTextField();
        reportType = new javax.swing.JTextField();
        reportYear = new javax.swing.JTextField();
        reportAuthor = new javax.swing.JTextField();
        viewPubYearLabel2 = new javax.swing.JLabel();
        viewPubYearLabel3 = new javax.swing.JLabel();
        viewPubYearLabel4 = new javax.swing.JLabel();
        ReportPanel = new javax.swing.JPanel();
        reportField = new javax.swing.JTextArea();
        reportCancel = new javax.swing.JButton();
        MenuBar = new javax.swing.JMenuBar();
        DataMenu = new javax.swing.JMenu();
        InsertMenu = new javax.swing.JMenu();
        BookMenu = new javax.swing.JMenuItem();
        MusicMenu = new javax.swing.JMenuItem();
        MovieMenu = new javax.swing.JMenuItem();
        UpdateMenu = new javax.swing.JMenuItem();
        RemoveMenu = new javax.swing.JMenuItem();
        ViewMenu = new javax.swing.JMenu();
        View = new javax.swing.JMenuItem();
        ReportMenu = new javax.swing.JMenu();
        R1 = new javax.swing.JMenuItem();
        R2 = new javax.swing.JMenuItem();
        R3 = new javax.swing.JMenuItem();
        R4 = new javax.swing.JMenuItem();
        R5 = new javax.swing.JMenuItem();
        R6 = new javax.swing.JMenuItem();
        R7 = new javax.swing.JMenuItem();
        R8 = new javax.swing.JMenuItem();
        R9 = new javax.swing.JMenuItem();
        R10 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        parentPanel.setPreferredSize(new java.awt.Dimension(1920, 1080));
        parentPanel.setLayout(new java.awt.CardLayout());

        cover.setPreferredSize(new java.awt.Dimension(1920, 1080));

        coverName.setFont(new java.awt.Font("Tahoma", 1, 48)); // NOI18N
        coverName.setText("Home Library System");

        coverAuthor.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        coverAuthor.setText("By Jiaxin Tan");

        javax.swing.GroupLayout coverLayout = new javax.swing.GroupLayout(cover);
        cover.setLayout(coverLayout);
        coverLayout.setHorizontalGroup(
            coverLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, coverLayout.createSequentialGroup()
                .addContainerGap(282, Short.MAX_VALUE)
                .addComponent(coverName)
                .addGap(280, 280, 280))
            .addGroup(coverLayout.createSequentialGroup()
                .addGap(470, 470, 470)
                .addComponent(coverAuthor)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        coverLayout.setVerticalGroup(
            coverLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(coverLayout.createSequentialGroup()
                .addGap(232, 232, 232)
                .addComponent(coverName)
                .addGap(84, 84, 84)
                .addComponent(coverAuthor)
                .addContainerGap(406, Short.MAX_VALUE))
        );

        parentPanel.add(cover, "card4");

        BookPanel.setPreferredSize(new java.awt.Dimension(1080, 800));

        bookLabel.setText("Book Name");

        ISBNLabel.setText("ISBN");

        publisherLabel.setText("Publisher Name");

        editionLabel.setText("Edition Number");

        authorLabel.setText("Author(s) (format: first name + space + last name + \";\" ) (at most 5 names)");

        pageLabel.setText("Page Number");

        pYearLabel.setText("Publication Year");

        keywordLabel.setText("Keywords (use ';' to separate, at most 20 words) ");

        keywords.setColumns(20);
        keywords.setRows(5);

        descriptionLabel.setText("Description (at most 5000 characters)");

        description.setColumns(20);
        description.setRows(5);

        bSubmit.setText("Submit");
        bSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSubmitActionPerformed(evt);
            }
        });

        bCancel.setText("Cancel");
        bCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bCancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout BookPanelLayout = new javax.swing.GroupLayout(BookPanel);
        BookPanel.setLayout(BookPanelLayout);
        BookPanelLayout.setHorizontalGroup(
            BookPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, BookPanelLayout.createSequentialGroup()
                .addContainerGap(358, Short.MAX_VALUE)
                .addGroup(BookPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(descriptionLabel)
                    .addComponent(keywordLabel)
                    .addComponent(pYearLabel)
                    .addComponent(authorLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(publisherLabel)
                    .addComponent(ISBN)
                    .addComponent(editonNum)
                    .addComponent(ISBNLabel)
                    .addComponent(bookLabel)
                    .addComponent(editionLabel)
                    .addComponent(publisherName)
                    .addComponent(bookName)
                    .addComponent(authors)
                    .addComponent(pageLabel)
                    .addComponent(pageNum)
                    .addGroup(BookPanelLayout.createSequentialGroup()
                        .addComponent(bSubmit, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(bCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(bYear)
                    .addComponent(keywords)
                    .addComponent(description))
                .addGap(357, 357, 357))
        );
        BookPanelLayout.setVerticalGroup(
            BookPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BookPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(bookLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bookName, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ISBNLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(BookPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(BookPanelLayout.createSequentialGroup()
                        .addComponent(ISBN, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(publisherLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(publisherName, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(editionLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(editonNum, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(authorLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(authors, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pageLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pageNum, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pYearLabel)
                        .addGap(40, 40, 40))
                    .addComponent(bYear, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addComponent(keywordLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(keywords, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(descriptionLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(description, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(BookPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bSubmit)
                    .addComponent(bCancel))
                .addContainerGap(63, Short.MAX_VALUE))
        );

        parentPanel.add(BookPanel, "card4");

        MusicPanel.setPreferredSize(new java.awt.Dimension(1080, 800));

        diskNameLabel.setText("Disk");

        micSubmit.setText("Submit");
        micSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                micSubmitActionPerformed(evt);
            }
        });

        micCancel.setText("Cancel");
        micCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                micCancelActionPerformed(evt);
            }
        });

        micPYearLabel.setText("Publication Year");

        trackLabel.setText("Track");

        diskTypeLabel.setText("Type (0 for CD, 1 for Vinyl)");

        lyricsLabel.setText("Lyrics Language");

        songWriterLabel.setText("Song Writer");

        songWriterLabel1.setText("Composer");

        songWriterLabel2.setText("Producer");

        songWriterLabel3.setText("Arrangement");

        micPYearLabel1.setText("Singer");

        jLabel1.setText("Person Name Format: firstname + space + familyname");

        jLabel5.setText("Each role contains only one name");

        javax.swing.GroupLayout MusicPanelLayout = new javax.swing.GroupLayout(MusicPanel);
        MusicPanel.setLayout(MusicPanelLayout);
        MusicPanelLayout.setHorizontalGroup(
            MusicPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, MusicPanelLayout.createSequentialGroup()
                .addContainerGap(371, Short.MAX_VALUE)
                .addGroup(MusicPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(singer, javax.swing.GroupLayout.PREFERRED_SIZE, 335, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(micPYearLabel)
                    .addGroup(MusicPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, MusicPanelLayout.createSequentialGroup()
                            .addComponent(micSubmit, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(micCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(micYear, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 335, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(MusicPanelLayout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addGroup(MusicPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(diskNameLabel)
                            .addComponent(diskTypeLabel)
                            .addComponent(diskType)
                            .addComponent(trackLabel)
                            .addComponent(trackName, javax.swing.GroupLayout.PREFERRED_SIZE, 334, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lyricsLabel)
                            .addComponent(lyrics, javax.swing.GroupLayout.PREFERRED_SIZE, 334, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(songWriterLabel)
                            .addComponent(songWriter, javax.swing.GroupLayout.PREFERRED_SIZE, 334, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(songWriterLabel1)
                            .addComponent(diskComposer, javax.swing.GroupLayout.PREFERRED_SIZE, 334, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(songWriterLabel2)
                            .addComponent(diskProducer, javax.swing.GroupLayout.PREFERRED_SIZE, 334, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(songWriterLabel3)
                            .addComponent(arrangement, javax.swing.GroupLayout.PREFERRED_SIZE, 334, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(micPYearLabel1)
                            .addComponent(diskName, javax.swing.GroupLayout.PREFERRED_SIZE, 335, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 334, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 334, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(373, 373, 373))
        );
        MusicPanelLayout.setVerticalGroup(
            MusicPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MusicPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(diskNameLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(diskName, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(diskTypeLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(diskType, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(trackLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(trackName, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lyricsLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lyrics, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(songWriterLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(songWriter, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(songWriterLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(diskComposer, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(songWriterLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(diskProducer, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(songWriterLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(arrangement, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(micPYearLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(singer, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(micPYearLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(micYear, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(MusicPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(micSubmit)
                    .addComponent(micCancel))
                .addGap(78, 78, 78))
        );

        parentPanel.add(MusicPanel, "card3");

        MoviePanel.setPreferredSize(new java.awt.Dimension(1080, 800));

        movieNameLabel.setText("Movie Name");

        directorLabel.setText("Director(s)");

        scriptLabel.setText("Script Writer(s)");

        producerLabel.setText("Producer(s)");

        composerLabel.setText("Composer(s)");

        costumeLabel.setText("Costume Designer(s) ");

        releaseLabel.setText("Release Year");

        movSubmit.setText("Submit");
        movSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                movSubmitActionPerformed(evt);
            }
        });

        movCancel.setText("Cancel");
        movCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                movCancelActionPerformed(evt);
            }
        });

        editorLabel.setText("Editor(s)");

        castLabel.setText("Cast ");

        jLabel2.setText("Name Format: firstname + space + familyname + space + gender + \";\"");

        jLabel3.setText("Gender: 0 for male, 1 for female");

        jLabel4.setText("At most 10 names for cast, 3 for other role");

        javax.swing.GroupLayout MoviePanelLayout = new javax.swing.GroupLayout(MoviePanel);
        MoviePanel.setLayout(MoviePanelLayout);
        MoviePanelLayout.setHorizontalGroup(
            MoviePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MoviePanelLayout.createSequentialGroup()
                .addGap(370, 370, 370)
                .addGroup(MoviePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(editorLabel)
                    .addComponent(castLabel)
                    .addGroup(MoviePanelLayout.createSequentialGroup()
                        .addGroup(MoviePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(movSubmit, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(releaseLabel, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(composerLabel, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(scriptLabel, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(directorLabel, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(movieNameLabel, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(producerLabel, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(costumeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(movCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(movieName)
                    .addComponent(director)
                    .addComponent(script)
                    .addComponent(mProducer)
                    .addComponent(composer)
                    .addComponent(editor)
                    .addComponent(costume)
                    .addComponent(cast)
                    .addComponent(movYear)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(368, Short.MAX_VALUE))
        );
        MoviePanelLayout.setVerticalGroup(
            MoviePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, MoviePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(movieNameLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(movieName, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(directorLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(director, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scriptLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(script, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(producerLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mProducer, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(composerLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(composer, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(editorLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(editor, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(costumeLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(costume, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(castLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cast, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(releaseLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(movYear, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24)
                .addGroup(MoviePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(movSubmit)
                    .addComponent(movCancel))
                .addContainerGap(103, Short.MAX_VALUE))
        );

        parentPanel.add(MoviePanel, "card4");

        ViewPanel.setPreferredSize(new java.awt.Dimension(1080, 800));

        viewNameLabel.setText("Name");

        viewPubYearLabel.setText("Publication Year");

        viewSubmit.setText("Submit");
        viewSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewSubmitActionPerformed(evt);
            }
        });

        viewCancel.setText("Cancel");
        viewCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewCancelActionPerformed(evt);
            }
        });

        buttonGroup.add(bookRadio);
        bookRadio.setText("Book");
        bookRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookRadioActionPerformed(evt);
            }
        });

        buttonGroup.add(musicRadio);
        musicRadio.setText("Music");
        musicRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                musicRadioActionPerformed(evt);
            }
        });

        buttonGroup.add(movieRadio);
        movieRadio.setText("Movie");
        movieRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                movieRadioActionPerformed(evt);
            }
        });

        viewPubYearLabel1.setText("Name");

        reportName.setEditable(false);

        reportType.setEditable(false);

        reportYear.setEditable(false);

        reportAuthor.setEditable(false);

        viewPubYearLabel2.setText("Type");

        viewPubYearLabel3.setText("Author/Singer/Director");

        viewPubYearLabel4.setText("Year");

        javax.swing.GroupLayout ViewPanelLayout = new javax.swing.GroupLayout(ViewPanel);
        ViewPanel.setLayout(ViewPanelLayout);
        ViewPanelLayout.setHorizontalGroup(
            ViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ViewPanelLayout.createSequentialGroup()
                .addContainerGap(370, Short.MAX_VALUE)
                .addGroup(ViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(reportYear)
                    .addGroup(ViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(viewPubYearLabel4)
                        .addGroup(ViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(reportAuthor)
                            .addGroup(ViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(viewPubYearLabel3)
                                .addGroup(ViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(reportType)
                                    .addComponent(viewPubYearLabel1, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(ViewPanelLayout.createSequentialGroup()
                                        .addComponent(viewSubmit, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(viewCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(viewPubYearLabel, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(viewNameLabel, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(viewName, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 334, Short.MAX_VALUE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, ViewPanelLayout.createSequentialGroup()
                                        .addComponent(bookRadio)
                                        .addGap(87, 87, 87)
                                        .addComponent(musicRadio)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(movieRadio))
                                    .addComponent(viewYear, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(reportName)
                                    .addComponent(viewPubYearLabel2, javax.swing.GroupLayout.Alignment.LEADING))))))
                .addGap(376, 376, 376))
        );
        ViewPanelLayout.setVerticalGroup(
            ViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ViewPanelLayout.createSequentialGroup()
                .addComponent(viewNameLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(viewName, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(viewPubYearLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(viewYear, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22)
                .addGroup(ViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bookRadio)
                    .addComponent(musicRadio)
                    .addComponent(movieRadio))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(ViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(viewSubmit)
                    .addComponent(viewCancel))
                .addGap(41, 41, 41)
                .addComponent(viewPubYearLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(reportName, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(viewPubYearLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(reportType, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(viewPubYearLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(reportAuthor, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(viewPubYearLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(reportYear, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 307, Short.MAX_VALUE))
        );

        parentPanel.add(ViewPanel, "card6");

        ReportPanel.setPreferredSize(new java.awt.Dimension(1080, 800));

        reportField.setEditable(false);

        reportCancel.setText("Cancel");
        reportCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reportCancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ReportPanelLayout = new javax.swing.GroupLayout(ReportPanel);
        ReportPanel.setLayout(ReportPanelLayout);
        ReportPanelLayout.setHorizontalGroup(
            ReportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ReportPanelLayout.createSequentialGroup()
                .addContainerGap(292, Short.MAX_VALUE)
                .addComponent(reportField, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(288, 288, 288))
            .addGroup(ReportPanelLayout.createSequentialGroup()
                .addGap(507, 507, 507)
                .addComponent(reportCancel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        ReportPanelLayout.setVerticalGroup(
            ReportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ReportPanelLayout.createSequentialGroup()
                .addGap(133, 133, 133)
                .addComponent(reportField, javax.swing.GroupLayout.PREFERRED_SIZE, 366, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(53, 53, 53)
                .addComponent(reportCancel)
                .addContainerGap(234, Short.MAX_VALUE))
        );

        parentPanel.add(ReportPanel, "card6");

        getContentPane().add(parentPanel, java.awt.BorderLayout.CENTER);

        MenuBar.setFont(new java.awt.Font("Microsoft YaHei UI", 0, 14)); // NOI18N
        MenuBar.setPreferredSize(new java.awt.Dimension(150, 21));

        DataMenu.setText("Data");
        DataMenu.setFont(new java.awt.Font("Microsoft YaHei UI", 0, 14)); // NOI18N

        InsertMenu.setText("Insert");

        BookMenu.setText("Book");
        BookMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BookMenuActionPerformed(evt);
            }
        });
        InsertMenu.add(BookMenu);

        MusicMenu.setText("Music");
        MusicMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MusicMenuActionPerformed(evt);
            }
        });
        InsertMenu.add(MusicMenu);

        MovieMenu.setText("Movie");
        MovieMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MovieMenuActionPerformed(evt);
            }
        });
        InsertMenu.add(MovieMenu);

        DataMenu.add(InsertMenu);

        UpdateMenu.setText("Update");
        UpdateMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateMenuActionPerformed(evt);
            }
        });
        DataMenu.add(UpdateMenu);

        RemoveMenu.setText("Remove");
        RemoveMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemoveMenuActionPerformed(evt);
            }
        });
        DataMenu.add(RemoveMenu);

        MenuBar.add(DataMenu);

        ViewMenu.setText("View");
        ViewMenu.setFont(new java.awt.Font("Microsoft YaHei UI", 0, 14)); // NOI18N

        View.setText("View");
        View.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ViewActionPerformed(evt);
            }
        });
        ViewMenu.add(View);

        MenuBar.add(ViewMenu);

        ReportMenu.setText("Report");
        ReportMenu.setFont(new java.awt.Font("Microsoft YaHei UI", 0, 14)); // NOI18N

        R1.setText("Authors' Publications");
        R1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                R1ActionPerformed(evt);
            }
        });
        ReportMenu.add(R1);

        R2.setText("Publications in one Year");
        R2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                R2ActionPerformed(evt);
            }
        });
        ReportMenu.add(R2);

        R3.setText("Books with Similar Topic");
        R3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                R3ActionPerformed(evt);
            }
        });
        ReportMenu.add(R3);

        R4.setText("Frequent Publishers");
        R4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                R4ActionPerformed(evt);
            }
        });
        ReportMenu.add(R4);

        R5.setText("Most Popular Subjects");
        R5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                R5ActionPerformed(evt);
            }
        });
        ReportMenu.add(R5);

        R6.setText("Multi Skills Movie Crew");
        R6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                R6ActionPerformed(evt);
            }
        });
        ReportMenu.add(R6);

        R7.setText("Award Winning Movies");
        R7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                R7ActionPerformed(evt);
            }
        });
        ReportMenu.add(R7);

        R8.setText("Music with Similar Name");
        R8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                R8ActionPerformed(evt);
            }
        });
        ReportMenu.add(R8);

        R9.setText("Multi Skills Music Crew");
        R9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                R9ActionPerformed(evt);
            }
        });
        ReportMenu.add(R9);

        R10.setText("Similar names");
        R10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                R10ActionPerformed(evt);
            }
        });
        ReportMenu.add(R10);

        MenuBar.add(ReportMenu);

        setJMenuBar(MenuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /* 
    ---
    Connection Function
    ---
    */
    public static Connection getConnection() {
    	try {
    		String driver = "com.mysql.cj.jdbc.Driver";
    		//String url = "jdbc:mysql://localhost:3306/HL?user=root&password=";
    		//url += "&serverTimezone=America/Toronto";
    		Class.forName(driver);
    		//Connection con = DriverManager.getConnection(url);
    		Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/HL", "root", "");
    		return con;
    	} catch (Exception e) {
    		JOptionPane.showMessageDialog(null, "Connect Failed");
    		JOptionPane.showMessageDialog(null, e);
    	}
    	return null;
    }
    
    private void BookMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BookMenuActionPerformed
        parentPanel.removeAll();
        parentPanel.add(BookPanel);
        parentPanel.repaint();
        parentPanel.revalidate();
    }//GEN-LAST:event_BookMenuActionPerformed

    private void MusicMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MusicMenuActionPerformed
        parentPanel.removeAll();
        parentPanel.add(MusicPanel);
        parentPanel.repaint();
        parentPanel.revalidate();
    }//GEN-LAST:event_MusicMenuActionPerformed

    private void MovieMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MovieMenuActionPerformed
        parentPanel.removeAll();
        parentPanel.add(MoviePanel);
        parentPanel.repaint();
        parentPanel.revalidate();
    }//GEN-LAST:event_MovieMenuActionPerformed

    /* 
    ---
    Data->Update
    ---
    */
    private void UpdateMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateMenuActionPerformed
        String name = JOptionPane.showInputDialog(null, "Enter a name");
        if (name != null) {
            try {
            	Connection con = getConnection();
            	PreparedStatement book = con.prepareStatement("SELECT * FROM Book WHERE Title = ?");
            	book.setString(1, name);
            	ResultSet rs = book.executeQuery();
            	if (rs.next()) {
            		ISBN.setText(rs.getString("ISBN"));
            		bookName.setText(rs.getString("Title"));
            		publisherName.setText(rs.getString("Publisher"));
            		pageNum.setText(rs.getString("NumberOfPages"));
            		bYear.setText(rs.getString("YearOfPublication"));
            		editonNum.setText(rs.getString("EditionNumber"));
            		description.setText(rs.getString("Abstract"));
            		PreparedStatement id = con.prepareStatement("SELECT * FROM BookAuthor WHERE ISBN = ?");
            		id.setString(1, rs.getString("ISBN"));
            		ResultSet rs2 = id.executeQuery();
            		String author_list = "";
            		while (rs2.next()) {
            			String aid = rs2.getString("Author_ID");
            			PreparedStatement author = con.prepareStatement("SELECT * FROM PeopleInvolved WHERE ID = ?");
            			author.setString(1, aid);
            			ResultSet rs3 = author.executeQuery();
            			if (rs3.next()) {
            				author_list += (rs3.getString("FirstName") + " " + rs3.getString("FamilyName") + ";");
            			}
            		}
            		authors.setText(author_list);
            		PreparedStatement key = con.prepareStatement("SELECT * FROM BookKeyword WHERE ISBN = ?");
            		key.setString(1, rs.getString("ISBN"));
            		ResultSet rs4 = key.executeQuery();
            		String keyword_list = "";
            		while (rs4.next()) {
            			String k = rs4.getString("Keyword_ID");
            			PreparedStatement keyword = con.prepareStatement("SELECT * FROM Keyword WHERE ID = ?");
            			keyword.setString(1, k);
            			ResultSet rs5 = keyword.executeQuery();
            			if (rs5.next()) {
            				keyword_list += (rs5.getString("Tag") + ";");
            			}
            		}
            		keywords.setText(keyword_list);
                	PreparedStatement book1 = con.prepareStatement("ALTER TABLE BookAuthor DROP FOREIGN KEY fk_Book_has_Author_Book, DROP FOREIGN KEY fk_Book_has_Author_Author1");
                	PreparedStatement book2 = con.prepareStatement("ALTER TABLE BookAuthor ADD "
                			+ "CONSTRAINT fk_Book_has_Author_Book FOREIGN KEY (ISBN) REFERENCES Book (ISBN) ON DELETE CASCADE ON UPDATE CASCADE," 
                			+ "ADD CONSTRAINT fk_Book_has_Author_Author1 FOREIGN KEY (Author_ID) REFERENCES PeopleInvolved (ID) ON DELETE CASCADE ON UPDATE CASCADE");
                	PreparedStatement book3 = con.prepareStatement("ALTER TABLE BookKeyword DROP FOREIGN KEY fk_Book_has_Keywords_Book1, DROP FOREIGN KEY fk_Book_has_Keywords_Keywords1");
                	PreparedStatement book4 = con.prepareStatement("ALTER TABLE BookKeyword ADD "
                			+ "CONSTRAINT fk_Book_has_Keywords_Book1 FOREIGN KEY (ISBN) REFERENCES Book (ISBN) ON DELETE CASCADE ON UPDATE CASCADE," 
                			+ "ADD CONSTRAINT fk_Book_has_Keywords_Keywords1 FOREIGN KEY (Keyword_ID) REFERENCES Keyword (ID) ON DELETE CASCADE ON UPDATE CASCADE");
                	book1.executeUpdate();
                	book2.executeUpdate();
                	book3.executeUpdate();
                	book4.executeUpdate();
                	PreparedStatement delbook = con.prepareStatement("DELETE FROM Book WHERE Title = ?");
                	delbook.setString(1, name);
                	delbook.executeUpdate();
                	parentPanel.removeAll();
                	parentPanel.add(BookPanel);
                	parentPanel.repaint();
                	parentPanel.revalidate();
            	}
            	else {
            		PreparedStatement music = con.prepareStatement("SELECT * FROM Music WHERE AlbumName = ?");
            		music.setString(1, name);
            		ResultSet rsm = music.executeQuery();
            		if (rsm.next()) {
            			diskName.setText(rsm.getString("AlbumName"));
            			micYear.setText(rsm.getString("Year"));
            			trackName.setText(rsm.getString("MusicName"));
            			lyrics.setText(rsm.getString("Language"));
            			diskType.setText(rsm.getString("DiskType"));
            			String producerID = rsm.getString("Producer_ID");
                                PreparedStatement producer = con.prepareStatement("SELECT * FROM PeopleInvolved WHERE ID = ?");
                                producer.setString(1, producerID);
                                ResultSet rspro = producer.executeQuery();
                                if (rspro.next()) {
                                        diskProducer.setText(rspro.getString("FirstName") + " " + rspro.getString("FamilyName"));
                                }
                                PreparedStatement singerD = con.prepareStatement("SELECT * FROM MusicSinger WHERE AlbumName = ?");
                                singerD.setString(1, name);
                                ResultSet rsms = singerD.executeQuery();
                                String singerID = "0";
                                if (rsms.next()) {
                                        singerID = rsms.getString("PeopleInvolved_ID");
                                }
                                PreparedStatement getsinger = con.prepareStatement("SELECT * FROM PeopleInvolved WHERE ID = ?");
                                getsinger.setString(1, singerID);
                                ResultSet rssinger = getsinger.executeQuery();
                                while (rssinger.next()) {
                                        singer.setText(rssinger.getString("FirstName") + " " + rssinger.getString("FamilyName"));
                                }
            		}
                    parentPanel.removeAll();
                	parentPanel.add(MusicPanel);
                	parentPanel.repaint();
                	parentPanel.revalidate();
            	}
            }
            catch (Exception e) {
            	JOptionPane.showMessageDialog(null, e);
            }
        }
    }//GEN-LAST:event_UpdateMenuActionPerformed

    public void setNoAction() {
        try {
        	Connection con = getConnection();
        	PreparedStatement book1 = con.prepareStatement("ALTER TABLE BookAuthor DROP FOREIGN KEY fk_Book_has_Author_Book, DROP FOREIGN KEY fk_Book_has_Author_Author1");
        	PreparedStatement book2 = con.prepareStatement("ALTER TABLE BookAuthor ADD "
        			+ "CONSTRAINT fk_Book_has_Author_Book FOREIGN KEY (ISBN) REFERENCES Book (ISBN) ON DELETE NO ACTION ON UPDATE NO ACTION," 
        			+ "ADD CONSTRAINT fk_Book_has_Author_Author1 FOREIGN KEY (Author_ID) REFERENCES PeopleInvolved (ID) ON DELETE NO ACTION ON UPDATE NO ACTION");
        	PreparedStatement book3 = con.prepareStatement("ALTER TABLE BookKeyword DROP FOREIGN KEY fk_Book_has_Keywords_Book1, DROP FOREIGN KEY fk_Book_has_Keywords_Keywords1");
        	PreparedStatement book4 = con.prepareStatement("ALTER TABLE BookKeyword ADD "
        			+ "CONSTRAINT fk_Book_has_Keywords_Book1 FOREIGN KEY (ISBN) REFERENCES Book (ISBN) ON DELETE NO ACTION ON UPDATE NO ACTION," 
        			+ "ADD CONSTRAINT fk_Book_has_Keywords_Keywords1 FOREIGN KEY (Keyword_ID) REFERENCES Keyword (ID) ON DELETE NO ACTION ON UPDATE NO ACTION");
        	PreparedStatement music1 = con.prepareStatement("ALTER TABLE Music DROP FOREIGN KEY fk_Album_PeopleInvolved1");
        	PreparedStatement music2 = con.prepareStatement("ALTER TABLE Music ADD "
        			+ "CONSTRAINT fk_Album_PeopleInvolved1 FOREIGN KEY (Producer_ID) REFERENCES PeopleInvolved (ID) ON DELETE NO ACTION ON UPDATE NO ACTION");
        	PreparedStatement music3 = con.prepareStatement("ALTER TABLE MusicSinger DROP FOREIGN KEY fk_Album_has_PeopleInvolved_Album2, DROP FOREIGN KEY fk_Album_has_PeopleInvolved_PeopleInvolved2");
        	PreparedStatement music4 = con.prepareStatement("ALTER TABLE MusicSinger ADD "
        			+ "CONSTRAINT fk_Album_has_PeopleInvolved_Album2 FOREIGN KEY (AlbumName , Year , MusicName) REFERENCES Music (AlbumName , Year , MusicName) ON DELETE NO ACTION ON UPDATE NO ACTION," 
        			+ "ADD CONSTRAINT fk_Album_has_PeopleInvolved_PeopleInvolved2 FOREIGN KEY (PeopleInvolved_ID) REFERENCES PeopleInvolved (ID) ON DELETE NO ACTION ON UPDATE NO ACTION");
        	PreparedStatement music5 = con.prepareStatement("ALTER TABLE PeopleInvolvedMusic DROP FOREIGN KEY fk_Album_has_PeopleInvolved_Album3, DROP FOREIGN KEY fk_Album_has_PeopleInvolved_PeopleInvolved3");
        	PreparedStatement music6 = con.prepareStatement("ALTER TABLE PeopleInvolvedMusic ADD "
        			+ "CONSTRAINT fk_Album_has_PeopleInvolved_Album3 FOREIGN KEY (AlbumName , Year , MusicName) REFERENCES Music (AlbumName , Year , MusicName) ON DELETE NO ACTION ON UPDATE NO ACTION," 
        			+ "ADD CONSTRAINT fk_Album_has_PeopleInvolved_PeopleInvolved3 FOREIGN KEY (PeopleInvolved_ID) REFERENCES PeopleInvolved (ID) ON DELETE NO ACTION ON UPDATE NO ACTION");
        	PreparedStatement movie1 = con.prepareStatement("ALTER TABLE CrewMember DROP FOREIGN KEY fk_PeopleInvolved_has_Movie_PeopleInvolved1, DROP FOREIGN KEY fk_PeopleInvolved_has_Movie_Movie1, DROP FOREIGN KEY fk_CrewMember_Role1");
        	PreparedStatement movie2 = con.prepareStatement("ALTER TABLE CrewMember ADD "
        			+ "CONSTRAINT fk_PeopleInvolved_has_Movie_PeopleInvolved1 FOREIGN KEY (PeopleInvolved_ID) REFERENCES PeopleInvolved (ID) ON DELETE NO ACTION ON UPDATE NO ACTION," 
        			+ "ADD CONSTRAINT fk_PeopleInvolved_has_Movie_Movie1 FOREIGN KEY (MovieName , ReleaseYear) REFERENCES Movie (MovieName , Year) ON DELETE NO ACTION ON UPDATE NO ACTION,"
        			+ "ADD CONSTRAINT fk_CrewMember_Role1 FOREIGN KEY (Role_ID) REFERENCES Role (ID) ON DELETE NO ACTION ON UPDATE NO ACTION");
        	PreparedStatement movie3 = con.prepareStatement("ALTER TABLE Award DROP FOREIGN KEY fk_PeopleInvolved_has_Movie_PeopleInvolved2, DROP FOREIGN KEY fk_PeopleInvolved_has_Movie_Movie2");
        	PreparedStatement movie4 = con.prepareStatement("ALTER TABLE Award ADD "
        			+ "CONSTRAINT fk_PeopleInvolved_has_Movie_PeopleInvolved2 FOREIGN KEY (PeopleInvolved_ID) REFERENCES PeopleInvolved (ID) ON DELETE NO ACTION ON UPDATE NO ACTION,"
        			+ "ADD CONSTRAINT fk_PeopleInvolved_has_Movie_Movie2 FOREIGN KEY (MovieName , Year) REFERENCES Movie (MovieName , Year) ON DELETE NO ACTION ON UPDATE NO ACTION");
        	book1.executeUpdate();
        	book2.executeUpdate();
        	book3.executeUpdate();
        	book4.executeUpdate();
        	music1.executeUpdate();
        	music2.executeUpdate();
        	music3.executeUpdate();
        	music4.executeUpdate();
        	music5.executeUpdate();
        	music6.executeUpdate();
        	movie1.executeUpdate();
        	movie2.executeUpdate();
        	movie3.executeUpdate();
        	movie4.executeUpdate();
        }
        catch (SQLException e) {
        	JOptionPane.showMessageDialog(null, e);
        }
    }

    /* 
    ---
    Data->Remove 
    ---
    */
    private void RemoveMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemoveMenuActionPerformed
        String name = JOptionPane.showInputDialog(null, "Enter a name");
        if (name != null) {
            try {
            	Connection con = getConnection();
            	PreparedStatement book1 = con.prepareStatement("ALTER TABLE BookAuthor DROP FOREIGN KEY fk_Book_has_Author_Book, DROP FOREIGN KEY fk_Book_has_Author_Author1");
            	PreparedStatement book2 = con.prepareStatement("ALTER TABLE BookAuthor ADD "
            			+ "CONSTRAINT fk_Book_has_Author_Book FOREIGN KEY (ISBN) REFERENCES Book (ISBN) ON DELETE CASCADE ON UPDATE CASCADE," 
            			+ "ADD CONSTRAINT fk_Book_has_Author_Author1 FOREIGN KEY (Author_ID) REFERENCES PeopleInvolved (ID) ON DELETE CASCADE ON UPDATE CASCADE");
            	PreparedStatement book3 = con.prepareStatement("ALTER TABLE BookKeyword DROP FOREIGN KEY fk_Book_has_Keywords_Book1, DROP FOREIGN KEY fk_Book_has_Keywords_Keywords1");
            	PreparedStatement book4 = con.prepareStatement("ALTER TABLE BookKeyword ADD "
            			+ "CONSTRAINT fk_Book_has_Keywords_Book1 FOREIGN KEY (ISBN) REFERENCES Book (ISBN) ON DELETE CASCADE ON UPDATE CASCADE," 
            			+ "ADD CONSTRAINT fk_Book_has_Keywords_Keywords1 FOREIGN KEY (Keyword_ID) REFERENCES Keyword (ID) ON DELETE CASCADE ON UPDATE CASCADE");
            	PreparedStatement music1 = con.prepareStatement("ALTER TABLE Music DROP FOREIGN KEY fk_Album_PeopleInvolved1");
            	PreparedStatement music2 = con.prepareStatement("ALTER TABLE Music ADD "
            			+ "CONSTRAINT fk_Album_PeopleInvolved1 FOREIGN KEY (Producer_ID) REFERENCES PeopleInvolved (ID) ON DELETE CASCADE ON UPDATE CASCADE");
            	PreparedStatement music3 = con.prepareStatement("ALTER TABLE MusicSinger DROP FOREIGN KEY fk_Album_has_PeopleInvolved_Album2, DROP FOREIGN KEY fk_Album_has_PeopleInvolved_PeopleInvolved2");
            	PreparedStatement music4 = con.prepareStatement("ALTER TABLE MusicSinger ADD "
            			+ "CONSTRAINT fk_Album_has_PeopleInvolved_Album2 FOREIGN KEY (AlbumName , Year , MusicName) REFERENCES Music (AlbumName , Year , MusicName) ON DELETE CASCADE ON UPDATE CASCADE," 
            			+ "ADD CONSTRAINT fk_Album_has_PeopleInvolved_PeopleInvolved2 FOREIGN KEY (PeopleInvolved_ID) REFERENCES PeopleInvolved (ID) ON DELETE CASCADE ON UPDATE CASCADE");
            	PreparedStatement music5 = con.prepareStatement("ALTER TABLE PeopleInvolvedMusic DROP FOREIGN KEY fk_Album_has_PeopleInvolved_Album3, DROP FOREIGN KEY fk_Album_has_PeopleInvolved_PeopleInvolved3");
            	PreparedStatement music6 = con.prepareStatement("ALTER TABLE PeopleInvolvedMusic ADD "
            			+ "CONSTRAINT fk_Album_has_PeopleInvolved_Album3 FOREIGN KEY (AlbumName , Year , MusicName) REFERENCES Music (AlbumName , Year , MusicName) ON DELETE CASCADE ON UPDATE CASCADE," 
            			+ "ADD CONSTRAINT fk_Album_has_PeopleInvolved_PeopleInvolved3 FOREIGN KEY (PeopleInvolved_ID) REFERENCES PeopleInvolved (ID) ON DELETE CASCADE ON UPDATE CASCADE");
            	PreparedStatement movie1 = con.prepareStatement("ALTER TABLE CrewMember DROP FOREIGN KEY fk_PeopleInvolved_has_Movie_PeopleInvolved1, DROP FOREIGN KEY fk_PeopleInvolved_has_Movie_Movie1, DROP FOREIGN KEY fk_CrewMember_Role1");
            	PreparedStatement movie2 = con.prepareStatement("ALTER TABLE CrewMember ADD "
            			+ "CONSTRAINT fk_PeopleInvolved_has_Movie_PeopleInvolved1 FOREIGN KEY (PeopleInvolved_ID) REFERENCES PeopleInvolved (ID) ON DELETE CASCADE ON UPDATE CASCADE," 
            			+ "ADD CONSTRAINT fk_PeopleInvolved_has_Movie_Movie1 FOREIGN KEY (MovieName , ReleaseYear) REFERENCES Movie (MovieName , Year) ON DELETE CASCADE ON UPDATE CASCADE,"
            			+ "ADD CONSTRAINT fk_CrewMember_Role1 FOREIGN KEY (Role_ID) REFERENCES Role (ID) ON DELETE CASCADE ON UPDATE CASCADE");
            	PreparedStatement movie3 = con.prepareStatement("ALTER TABLE Award DROP FOREIGN KEY fk_PeopleInvolved_has_Movie_PeopleInvolved2, DROP FOREIGN KEY fk_PeopleInvolved_has_Movie_Movie2");
            	PreparedStatement movie4 = con.prepareStatement("ALTER TABLE Award ADD "
            			+ "CONSTRAINT fk_PeopleInvolved_has_Movie_PeopleInvolved2 FOREIGN KEY (PeopleInvolved_ID) REFERENCES PeopleInvolved (ID) ON DELETE CASCADE ON UPDATE CASCADE,"
            			+ "ADD CONSTRAINT fk_PeopleInvolved_has_Movie_Movie2 FOREIGN KEY (MovieName , Year) REFERENCES Movie (MovieName , Year) ON DELETE CASCADE ON UPDATE CASCADE");
            	book1.executeUpdate();
            	book2.executeUpdate();
            	book3.executeUpdate();
            	book4.executeUpdate();
            	music1.executeUpdate();
            	music2.executeUpdate();
            	music3.executeUpdate();
            	music4.executeUpdate();
            	music5.executeUpdate();
            	music6.executeUpdate();
            	movie1.executeUpdate();
            	movie2.executeUpdate();
            	movie3.executeUpdate();
            	movie4.executeUpdate();
            	
            	PreparedStatement delbook = con.prepareStatement("DELETE FROM Book WHERE Title = ?");
            	delbook.setString(1, name);
            	PreparedStatement delmic = con.prepareStatement("DELETE FROM Music WHERE AlbumName = ?");
            	delmic.setString(1, name);
            	PreparedStatement delmov = con.prepareStatement("DELETE FROM Movie WHERE MovieName = ?");
            	delmov.setString(1, name);
            	delbook.executeUpdate();
            	delmic.executeUpdate();
            	delmov.executeUpdate();
            	setNoAction();
            	JOptionPane.showMessageDialog(null, "Delete Success");
            }
            catch (SQLException e) {
            	JOptionPane.showMessageDialog(null, e);
            }
        }
    }//GEN-LAST:event_RemoveMenuActionPerformed

    private void ViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ViewActionPerformed
        parentPanel.removeAll();
        parentPanel.add(ViewPanel);
        parentPanel.repaint();
        parentPanel.revalidate();
    }//GEN-LAST:event_ViewActionPerformed

    /* 
    ---
    Data->insert->Book 
    ---
    */
    private void bSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSubmitActionPerformed
		if (authors.getText().equals("")) {
    		JOptionPane.showMessageDialog(null, "Author Name Can Not Be Empty");
		}
		else {
			try {
				Connection con = getConnection();
				
				//Book table insert
				PreparedStatement book = con.prepareStatement("INSERT INTO Book(ISBN, Title, Publisher, NumberOfPages, YearOfPublication, EditionNumber, Abstract)"
						+ "VALUES(?,?,?,?,?,?,?)");
				book.setString(1, ISBN.getText());
				book.setString(2, bookName.getText());
				book.setString(3, publisherName.getText());
				book.setString(4, pageNum.getText());
				book.setString(5, bYear.getText());
				if (editonNum.getText().equals("")) {
					book.setString(6, null);
				}
				else {
					book.setString(6, editonNum.getText());
				}
				book.setString(7, description.getText());
				book.executeUpdate();
				
				//PeopleInvolved table and BookAuhor table insert
				String[] author = authors.getText().split(";");
        		for (int i = 0; i < author.length; i++) {
        			//at most 5 authors for one book
        			if (i > 4) {
        				break;
        			}
        			String firstName = author[i].split(" ")[0];
        			String lastName = author[i].split(" ")[1];
                	PreparedStatement peopleRS = con.prepareStatement("SELECT * FROM PeopleInvolved WHERE FirstName = ?"
                			+ " AND FamilyName = ?");
                	peopleRS.setString(1, firstName);
                	peopleRS.setString(2, lastName);
                	ResultSet rs = peopleRS.executeQuery();
                	String author_id = "0";
                	if (rs.next()) {
                		author_id = rs.getString("ID");
                	}
                	if (author_id == "0") {
        				PreparedStatement people = con.prepareStatement("INSERT INTO PeopleInvolved(FirstName, FamilyName)"
                				+ "VALUES(?,?)");
                    	people.setString(1, firstName);
                    	people.setString(2, lastName);
                    	people.executeUpdate();
                    	PreparedStatement updateRS = con.prepareStatement("SELECT * FROM PeopleInvolved WHERE FirstName = ?"
                    			+ " AND FamilyName = ?");
                    	updateRS.setString(1, firstName);
                    	updateRS.setString(2, lastName);
                    	ResultSet rs2 = updateRS.executeQuery();
                    	if (rs2.next()) {
                    		author_id = rs2.getString("ID");
                    	}
                    	PreparedStatement bookAuthor = con.prepareStatement("INSERT INTO BookAuthor(ISBN, Author_ID)"
                    			+ "VALUE(?,?)");
                    	bookAuthor.setString(1, ISBN.getText());
                    	bookAuthor.setString(2, author_id);
                    	bookAuthor.executeUpdate();
                	}
                	else {
                    	PreparedStatement bookAuthor = con.prepareStatement("INSERT INTO BookAuthor(ISBN, Author_ID)"
                    			+ "VALUE(?,?)");
                    	bookAuthor.setString(1, ISBN.getText());
                    	bookAuthor.setString(2, author_id);
                    	bookAuthor.executeUpdate();
                	}
        		}
        		
        		//Keyword table and BookKeyword table insert
        		String[] keyword = keywords.getText().split(";");
        		for (int i = 0; i < keyword.length; i++) {
        			//at most 20 keywords for one book
        			if (i > 19 || keyword[i] == "") {
        				break;
        			}
                	PreparedStatement kwRS = con.prepareStatement("SELECT * FROM Keyword WHERE Tag = ?");
                	kwRS.setString(1, keyword[i]);
                	ResultSet rs = kwRS.executeQuery();
                	String kw_id = "0";
                	if (rs.next()) {
                		kw_id = rs.getString("ID");
                	}
                	if (kw_id == "0") {
        				PreparedStatement kw = con.prepareStatement("INSERT INTO Keyword(Tag)"
                				+ "VALUES(?)");
                    	kw.setString(1, keyword[i]);
                    	kw.executeUpdate();
                    	PreparedStatement updateRS = con.prepareStatement("SELECT * FROM Keyword WHERE Tag = ?");
                    	updateRS.setString(1, keyword[i]);
                    	ResultSet rs2 = updateRS.executeQuery();
                    	if (rs2.next()) {
                    		kw_id = rs2.getString("ID");
                    	}
                    	PreparedStatement bookkw = con.prepareStatement("INSERT INTO BookKeyword(ISBN, Keyword_ID)"
                    			+ "VALUE(?,?)");
                    	bookkw.setString(1, ISBN.getText());
                    	bookkw.setString(2, kw_id);
                    	bookkw.executeUpdate();
                	}
                	else {
                    	PreparedStatement bookkw = con.prepareStatement("INSERT INTO BookKeyword(ISBN, Keyword_ID)"
                    			+ "VALUE(?,?)");
                    	bookkw.setString(1, ISBN.getText());
                    	bookkw.setString(2, kw_id);
                    	bookkw.executeUpdate();
                	}
        		}
        		JOptionPane.showMessageDialog(null, "Book Data Inserted");
        		bookName.setText("");
        		ISBN.setText("");
        		publisherName.setText("");
        		editonNum.setText("");
        		authors.setText("");
        		pageNum.setText("");
        		bYear.setText("");
        		keywords.setText("");
        		description.setText("");
        		parentPanel.removeAll();
        		parentPanel.add(cover);
        		parentPanel.repaint();
        		parentPanel.revalidate();
			}
			catch (SQLException e) {
				JOptionPane.showMessageDialog(null, e);
			}
		}
    }//GEN-LAST:event_bSubmitActionPerformed

    private void bCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bCancelActionPerformed
        parentPanel.removeAll();
        parentPanel.add(cover);
        parentPanel.repaint();
        parentPanel.revalidate();
    }//GEN-LAST:event_bCancelActionPerformed
    
    public boolean micCheck() {
    	if (diskType.getText().equals(null)
    			|| diskName.getText().equals(null)
    			|| trackName.getText().equals(null)) {
    		return false;
    	}
    	else {
    		try {
    			Connection con = getConnection();
    			PreparedStatement prors = con.prepareStatement("SELECT * FROM Music WHERE AlbumName = ?");
    			prors.setString(1, diskName.getText());
    			ResultSet prs = prors.executeQuery();
    			String proID = "0";
    			if (prs.next()) {
    				proID = prs.getString("Producer_ID");
    			}
    			if (proID == "0") {
    				return true;
    			}
    			else {
    				PreparedStatement people = con.prepareStatement("SELECT * FROM PeopleInvolved WHERE ID = ?");
    				people.setString(1, proID);
    				ResultSet pers = people.executeQuery();
    				if (pers.next()) {
    					if (pers.getString("FirstName").equals(diskProducer.getText().split(" ")[0])
    							&& pers.getString("FamilyName").equals(diskProducer.getText().split(" ")[1])) {
    						return true;
    					}	
    				}
    				return false;
    			}
    		}
    		catch (SQLException e) {
    			JOptionPane.showMessageDialog(null, e);
    			return false;
    		}
    	}
    }

    public boolean peopleCheck(String first, String last) {
    	try {
    		Connection con = getConnection();
        	PreparedStatement people = con.prepareStatement("SELECT * FROM PeopleInvolved WHERE FirstName = ?"
        			+ " AND FamilyName = ?");
        	people.setString(1, first);
        	people.setString(2, last);
        	ResultSet rs = people.executeQuery();
        	if (rs.next()) {
        		return true;
        	}
        	return false;
    	}
    	catch (SQLException e) {
    		JOptionPane.showMessageDialog(null, e);
    		return false;
    	}
    }

    /* 
    ---
    Data->insert->Music
    ---
    */
    private void micSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_micSubmitActionPerformed
    	if (micCheck()) {
    		try {
        		Connection con = getConnection();
        		
        		//PeopleInvolved and PeopleInvolvedMusic table insert
        		String writer = songWriter.getText();
        		String composer = diskComposer.getText();
        		String producer = diskProducer.getText();
        		String arr = arrangement.getText();
        		String sing = singer.getText();
        		if (!peopleCheck(writer.split(" ")[0], writer.split(" ")[1])) {
    				PreparedStatement people1 = con.prepareStatement("INSERT INTO PeopleInvolved(FirstName, FamilyName)"
            				+ "VALUES(?,?)");
                	people1.setString(1, writer.split(" ")[0]);
                	people1.setString(2, writer.split(" ")[1]);
                	people1.executeUpdate();
        		}
        		if (!peopleCheck(composer.split(" ")[0], composer.split(" ")[1])) { 
        			PreparedStatement people2 = con.prepareStatement("INSERT INTO PeopleInvolved(FirstName, FamilyName)"
        					+ "VALUES(?,?)");
        			people2.setString(1, composer.split(" ")[0]);
        			people2.setString(2, composer.split(" ")[1]);
        			people2.executeUpdate();
        		}
        		if (!peopleCheck(producer.split(" ")[0], producer.split(" ")[1])) {
        			PreparedStatement people3 = con.prepareStatement("INSERT INTO PeopleInvolved(FirstName, FamilyName)"
        					+ "VALUES(?,?)");
        			people3.setString(1, producer.split(" ")[0]);
        			people3.setString(2, producer.split(" ")[1]);
        			people3.executeUpdate();
        		}
        		if (!peopleCheck(arr.split(" ")[0], arr.split(" ")[1])) {
        			PreparedStatement people4 = con.prepareStatement("INSERT INTO PeopleInvolved(FirstName, FamilyName)"
        					+ "VALUES(?,?)");
        			people4.setString(1, arr.split(" ")[0]);
        			people4.setString(2, arr.split(" ")[1]);
        			people4.executeUpdate();
        		}
            	if (!peopleCheck(sing.split(" ")[0], sing.split(" ")[1])) {
            		PreparedStatement people5 = con.prepareStatement("INSERT INTO PeopleInvolved(FirstName, FamilyName)"
            				+ "VALUES(?,?)");
            		people5.setString(1, sing.split(" ")[0]);
            		people5.setString(2, sing.split(" ")[1]);
            		people5.executeUpdate();
            	}
            	
            	//Music table insert
        		PreparedStatement music = con.prepareStatement("INSERT INTO Music(AlbumName, Year, MusicName, Language, DiskType, Producer_ID)"
        				+ "VALUE(?,?,?,?,?,?)");
        		music.setString(1, diskName.getText());
        		music.setString(2, micYear.getText());
        		music.setString(3, trackName.getText());
        		music.setString(4, lyrics.getText());
        		music.setString(5, diskType.getText());
            	PreparedStatement producerRS = con.prepareStatement("SELECT * FROM PeopleInvolved WHERE FirstName = ?"
            			+ " AND FamilyName = ?");
            	producerRS.setString(1, producer.split(" ")[0]);
            	producerRS.setString(2, producer.split(" ")[1]);
            	ResultSet rs = producerRS.executeQuery();
            	String producer_id = "0";
            	if (rs.next()) {
            		producer_id = rs.getString("ID");
            	}
        		music.setString(6, producer_id);
        		music.executeUpdate();
        		
        		//MusicSinger table insert
        		PreparedStatement musicSinger = con.prepareStatement("INSERT INTO MusicSinger(AlbumName, Year, MusicName, PeopleInvolved_ID)"
        				+ "VALUES(?,?,?,?)");
        		musicSinger.setString(1, diskName.getText());
        		musicSinger.setString(2, micYear.getText());
        		musicSinger.setString(3, trackName.getText());
            	PreparedStatement singerRS = con.prepareStatement("SELECT * FROM PeopleInvolved WHERE FirstName = ?"
            			+ " AND FamilyName = ?");
            	singerRS.setString(1, sing.split(" ")[0]);
            	singerRS.setString(2, sing.split(" ")[1]);
            	ResultSet rs2 = singerRS.executeQuery();
            	String singer_id = "0";
            	if (rs2.next()) {
            		singer_id = rs2.getString("ID");
            	}
        		musicSinger.setString(4, singer_id);
        		musicSinger.executeUpdate();
        		
        		//PeopleInvolvedMusic table insert
				PreparedStatement pm1 = con.prepareStatement("INSERT INTO PeopleInvolvedMusic(AlbumName, Year, MusicName, PeopleInvolved_ID, IsSongwriter)"
        				+ "VALUES(?,?,?,?,?)");
				pm1.setString(1, diskName.getText());
				pm1.setString(2, micYear.getText());
				pm1.setString(3, trackName.getText());
            	PreparedStatement writerRS = con.prepareStatement("SELECT * FROM PeopleInvolved WHERE FirstName = ?"
            			+ " AND FamilyName = ?");
            	writerRS.setString(1, writer.split(" ")[0]);
            	writerRS.setString(2, writer.split(" ")[1]);
            	ResultSet rs3 = writerRS.executeQuery();
            	String writer_id = "0";
            	if (rs3.next()) {
            		writer_id = rs3.getString("ID");
            	}
				pm1.setString(4, writer_id);
				pm1.setString(5, "1");
				pm1.executeUpdate();
				
				PreparedStatement pm2 = con.prepareStatement("INSERT INTO PeopleInvolvedMusic(AlbumName, Year, MusicName, PeopleInvolved_ID, IsComposer)"
        				+ "VALUES(?,?,?,?,?)");
				pm2.setString(1, diskName.getText());
				pm2.setString(2, micYear.getText());
				pm2.setString(3, trackName.getText());
            	PreparedStatement cpRS = con.prepareStatement("SELECT * FROM PeopleInvolved WHERE FirstName = ?"
            			+ " AND FamilyName = ?");
            	cpRS.setString(1, composer.split(" ")[0]);
            	cpRS.setString(2, composer.split(" ")[1]);
            	ResultSet rs4 = cpRS.executeQuery();
            	String cp_id = "0";
            	if (rs4.next()) {
            		cp_id = rs4.getString("ID");
            	}
				pm2.setString(4, cp_id);
				pm2.setString(5, "1");
				pm2.executeUpdate();
				
				PreparedStatement pm3 = con.prepareStatement("INSERT INTO PeopleInvolvedMusic(AlbumName, Year, MusicName, PeopleInvolved_ID, IsArranger)"
        				+ "VALUES(?,?,?,?,?)");
				pm3.setString(1, diskName.getText());
				pm3.setString(2, micYear.getText());
				pm3.setString(3, trackName.getText());
            	PreparedStatement aRS = con.prepareStatement("SELECT * FROM PeopleInvolved WHERE FirstName = ?"
            			+ " AND FamilyName = ?");
            	aRS.setString(1, arr.split(" ")[0]);
            	aRS.setString(2, arr.split(" ")[1]);
            	ResultSet rs5 = aRS.executeQuery();
            	String a_id = "0";
            	if (rs5.next()) {
            		a_id = rs5.getString("ID");
            	}
				pm3.setString(4, a_id);
				pm3.setString(5, "1");
				pm3.executeUpdate();
				
        		JOptionPane.showMessageDialog(null, "Music Data Inserted");
        		diskName.setText("");
        		diskType.setText("");
        		trackName.setText("");
        		lyrics.setText("");
        		songWriter.setText("");
        		diskComposer.setText("");
        		diskProducer.setText("");
        		arrangement.setText("");
        		singer.setText("");
        		micYear.setText("");
                parentPanel.removeAll();
                parentPanel.add(cover);
                parentPanel.repaint();
                parentPanel.revalidate();
        	}
        	catch (SQLException e) {
        		JOptionPane.showMessageDialog(null, e);
        	}
    	}
    	else {
    		JOptionPane.showMessageDialog(null, "Each album can has only one producer and most two singers");
    	}
    }//GEN-LAST:event_micSubmitActionPerformed

    private void micCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_micCancelActionPerformed
        parentPanel.removeAll();
        parentPanel.add(cover);
        parentPanel.repaint();
        parentPanel.revalidate();
    }//GEN-LAST:event_micCancelActionPerformed

    public boolean roleCheck(String des) {
    	try {
    		Connection con = getConnection();
        	PreparedStatement rl = con.prepareStatement("SELECT * FROM Role WHERE Description = ?");
        	rl.setString(1, des);
        	ResultSet rs = rl.executeQuery();
        	if (rs.next()) {
        		return true;
        	}
        	return false;
    	}
    	catch (SQLException e) {
    		JOptionPane.showMessageDialog(null, e);
    		return false;
    	}
    }
    
    /* 
    ---
    Data->insert->Movie 
    ---
    */
    private void movSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_movSubmitActionPerformed
    	try {
			Connection con = getConnection();
			
			//Movie table insert
			PreparedStatement movie = con.prepareStatement("INSERT INTO Movie(MovieName, Year)"
					+ "VALUES(?,?)");
			movie.setString(1, movieName.getText());
			movie.setString(2, movYear.getText());
			movie.executeUpdate();
			
			//Role table insert
			if (!roleCheck("cast")) {
	        	PreparedStatement r1 = con.prepareStatement("INSERT INTO Role(Description) VALUES(?)");
	        	r1.setString(1, "cast");
	        	r1.executeUpdate();
			}
			if (!roleCheck("directors")) {
	        	PreparedStatement r2 = con.prepareStatement("INSERT INTO Role(Description) VALUES(?)");
	        	r2.setString(1, "directors");
	        	r2.executeUpdate();
			}
			if (!roleCheck("script writers")) {
	        	PreparedStatement r3 = con.prepareStatement("INSERT INTO Role(Description) VALUES(?)");
	        	r3.setString(1, "script writers");
	        	r3.executeUpdate();
			}
			if (!roleCheck("producers")) {
	        	PreparedStatement r4 = con.prepareStatement("INSERT INTO Role(Description) VALUES(?)");
	        	r4.setString(1, "producers");
	        	r4.executeUpdate();
			}
			if (!roleCheck("composers")) {
	        	PreparedStatement r5 = con.prepareStatement("INSERT INTO Role(Description) VALUES(?)");
	        	r5.setString(1, "composers");
	        	r5.executeUpdate();
			}
			if (!roleCheck("editors")) {
	        	PreparedStatement r6 = con.prepareStatement("INSERT INTO Role(Description) VALUES(?)");
	        	r6.setString(1, "editors");
	        	r6.executeUpdate();
			}
			if (!roleCheck("costume designers")) {
	        	PreparedStatement r7 = con.prepareStatement("INSERT INTO Role(Description) VALUES(?)");
	        	r7.setString(1, "costume designers");
	        	r7.executeUpdate();
			}
			
			//PeopleInvolved table insert
    		String[] directors = director.getText().split(";");
    		String[] scripts = script.getText().split(";");
    		String[] producers = mProducer.getText().split(";");
    		String[] composers = composer.getText().split(";");
    		String[] editors = editor.getText().split(";");
    		String[] costumes = costume.getText().split(";");
    		String[] casts = cast.getText().split(";");
    		for (int i = 0; i < directors.length; i++) {
    			if (i > 2 || directors[i] == "") {
    				break;
    			}
        		if (!peopleCheck(directors[i].split(" ")[0], directors[i].split(" ")[1])) {
    				PreparedStatement dir = con.prepareStatement("INSERT INTO PeopleInvolved(FirstName, FamilyName, Gender)"
            				+ "VALUES(?,?,?)");
                	dir.setString(1, directors[i].split(" ")[0]);
                	dir.setString(2, directors[i].split(" ")[1]);
                	dir.setString(3, directors[i].split(" ")[2]);
                	dir.executeUpdate();
        		}
        		PreparedStatement crewdir = con.prepareStatement("INSERT INTO CrewMember(PeopleInvolved_ID, MovieName, ReleaseYear, Role_ID)"
        				+ "VALUES(?,?,?,?)");
            	PreparedStatement dirid = con.prepareStatement("SELECT * FROM PeopleInvolved WHERE FirstName = ?"
            			+ " AND FamilyName = ?");
            	dirid.setString(1, directors[i].split(" ")[0]);
            	dirid.setString(2, directors[i].split(" ")[1]);
            	ResultSet diridrs = dirid.executeQuery();
            	String id = "0";
            	if (diridrs.next()) {
            		id = diridrs.getString("ID");
            	}
        		crewdir.setString(1, id);
        		crewdir.setString(2, movieName.getText());
        		crewdir.setString(3, movYear.getText());
        		crewdir.setString(4, "2");
        		crewdir.executeUpdate();
    		}
    		for (int i = 0; i < scripts.length; i++) {
    			if (i > 2 || scripts[i] == "") {
    				break;
    			}
        		if (!peopleCheck(scripts[i].split(" ")[0], scripts[i].split(" ")[1])) {
    				PreparedStatement scr = con.prepareStatement("INSERT INTO PeopleInvolved(FirstName, FamilyName, Gender)"
            				+ "VALUES(?,?,?)");
                	scr.setString(1, scripts[i].split(" ")[0]);
                	scr.setString(2, scripts[i].split(" ")[1]);
                	scr.setString(3, scripts[i].split(" ")[2]);
                	scr.executeUpdate();
        		}
        		PreparedStatement crewdir = con.prepareStatement("INSERT INTO CrewMember(PeopleInvolved_ID, MovieName, ReleaseYear, Role_ID)"
        				+ "VALUES(?,?,?,?)");
            	PreparedStatement dirid = con.prepareStatement("SELECT * FROM PeopleInvolved WHERE FirstName = ?"
            			+ " AND FamilyName = ?");
            	dirid.setString(1, scripts[i].split(" ")[0]);
            	dirid.setString(2, scripts[i].split(" ")[1]);
            	ResultSet diridrs = dirid.executeQuery();
            	String id = "0";
            	if (diridrs.next()) {
            		id = diridrs.getString("ID");
            	}
        		crewdir.setString(1, id);
        		crewdir.setString(2, movieName.getText());
        		crewdir.setString(3, movYear.getText());
        		crewdir.setString(4, "3");
        		crewdir.executeUpdate();
    		}
    		for (int i = 0; i < producers.length; i++) {
    			if (i > 2 || producers[i] == "") {
    				break;
    			}
        		if (!peopleCheck(producers[i].split(" ")[0], producers[i].split(" ")[1])) {
    				PreparedStatement pro = con.prepareStatement("INSERT INTO PeopleInvolved(FirstName, FamilyName, Gender)"
            				+ "VALUES(?,?,?)");
                	pro.setString(1, producers[i].split(" ")[0]);
                	pro.setString(2, producers[i].split(" ")[1]);
                	pro.setString(3, producers[i].split(" ")[2]);
                	pro.executeUpdate();
        		}
        		PreparedStatement crewdir = con.prepareStatement("INSERT INTO CrewMember(PeopleInvolved_ID, MovieName, ReleaseYear, Role_ID)"
        				+ "VALUES(?,?,?,?)");
            	PreparedStatement dirid = con.prepareStatement("SELECT * FROM PeopleInvolved WHERE FirstName = ?"
            			+ " AND FamilyName = ?");
            	dirid.setString(1, producers[i].split(" ")[0]);
            	dirid.setString(2, producers[i].split(" ")[1]);
            	ResultSet diridrs = dirid.executeQuery();
            	String id = "0";
            	if (diridrs.next()) {
            		id = diridrs.getString("ID");
            	}
        		crewdir.setString(1, id);
        		crewdir.setString(2, movieName.getText());
        		crewdir.setString(3, movYear.getText());
        		crewdir.setString(4, "4");
        		crewdir.executeUpdate();
    		}
    		for (int i = 0; i < composers.length; i++) {
    			if (i > 2 || composers[i] == "") {
    				break;
    			}
        		if (!peopleCheck(composers[i].split(" ")[0], composers[i].split(" ")[1])) {
    				PreparedStatement com = con.prepareStatement("INSERT INTO PeopleInvolved(FirstName, FamilyName, Gender)"
            				+ "VALUES(?,?,?)");
                	com.setString(1, composers[i].split(" ")[0]);
                	com.setString(2, composers[i].split(" ")[1]);
                	com.setString(3, composers[i].split(" ")[2]);
                	com.executeUpdate();
        		}
        		PreparedStatement crewdir = con.prepareStatement("INSERT INTO CrewMember(PeopleInvolved_ID, MovieName, ReleaseYear, Role_ID)"
        				+ "VALUES(?,?,?,?)");
            	PreparedStatement dirid = con.prepareStatement("SELECT * FROM PeopleInvolved WHERE FirstName = ?"
            			+ " AND FamilyName = ?");
            	dirid.setString(1, composers[i].split(" ")[0]);
            	dirid.setString(2, composers[i].split(" ")[1]);
            	ResultSet diridrs = dirid.executeQuery();
            	String id = "0";
            	if (diridrs.next()) {
            		id = diridrs.getString("ID");
            	}
        		crewdir.setString(1, id);
        		crewdir.setString(2, movieName.getText());
        		crewdir.setString(3, movYear.getText());
        		crewdir.setString(4, "5");
        		crewdir.executeUpdate();
    		}
    		for (int i = 0; i < editors.length; i++) {
    			if (i > 2 || editors[i] == "") {
    				break;
    			}
        		if (!peopleCheck(editors[i].split(" ")[0], editors[i].split(" ")[1])) {
    				PreparedStatement edi = con.prepareStatement("INSERT INTO PeopleInvolved(FirstName, FamilyName, Gender)"
            				+ "VALUES(?,?,?)");
                	edi.setString(1, editors[i].split(" ")[0]);
                	edi.setString(2, editors[i].split(" ")[1]);
                	edi.setString(3, editors[i].split(" ")[2]);
                	edi.executeUpdate();
        		}
        		PreparedStatement crewdir = con.prepareStatement("INSERT INTO CrewMember(PeopleInvolved_ID, MovieName, ReleaseYear, Role_ID)"
        				+ "VALUES(?,?,?,?)");
            	PreparedStatement dirid = con.prepareStatement("SELECT * FROM PeopleInvolved WHERE FirstName = ?"
            			+ " AND FamilyName = ?");
            	dirid.setString(1, editors[i].split(" ")[0]);
            	dirid.setString(2, editors[i].split(" ")[1]);
            	ResultSet diridrs = dirid.executeQuery();
            	String id = "0";
            	if (diridrs.next()) {
            		id = diridrs.getString("ID");
            	}
        		crewdir.setString(1, id);
        		crewdir.setString(2, movieName.getText());
        		crewdir.setString(3, movYear.getText());
        		crewdir.setString(4, "6");
        		crewdir.executeUpdate();
    		}
    		for (int i = 0; i < costumes.length; i++) {
    			if (i > 2 || costumes[i] == "") {
    				break;
    			}
        		if (!peopleCheck(costumes[i].split(" ")[0], costumes[i].split(" ")[1])) {
    				PreparedStatement cos = con.prepareStatement("INSERT INTO PeopleInvolved(FirstName, FamilyName, Gender)"
            				+ "VALUES(?,?,?)");
                	cos.setString(1, costumes[i].split(" ")[0]);
                	cos.setString(2, costumes[i].split(" ")[1]);
                	cos.setString(3, costumes[i].split(" ")[2]);
                	cos.executeUpdate();
        		}
        		PreparedStatement crewdir = con.prepareStatement("INSERT INTO CrewMember(PeopleInvolved_ID, MovieName, ReleaseYear, Role_ID)"
        				+ "VALUES(?,?,?,?)");
            	PreparedStatement dirid = con.prepareStatement("SELECT * FROM PeopleInvolved WHERE FirstName = ?"
            			+ " AND FamilyName = ?");
            	dirid.setString(1, costumes[i].split(" ")[0]);
            	dirid.setString(2, costumes[i].split(" ")[1]);
            	ResultSet diridrs = dirid.executeQuery();
            	String id = "0";
            	if (diridrs.next()) {
            		id = diridrs.getString("ID");
            	}
        		crewdir.setString(1, id);
        		crewdir.setString(2, movieName.getText());
        		crewdir.setString(3, movYear.getText());
        		crewdir.setString(4, "7");
        		crewdir.executeUpdate();
    		}
    		for (int i = 0; i < casts.length; i++) {
    			if (i > 9 || casts[i] == "") {
    				break;
    			}
        		if (!peopleCheck(casts[i].split(" ")[0], casts[i].split(" ")[1])) {
    				PreparedStatement cas = con.prepareStatement("INSERT INTO PeopleInvolved(FirstName, FamilyName, Gender)"
            				+ "VALUES(?,?,?)");
                	cas.setString(1, casts[i].split(" ")[0]);
                	cas.setString(2, casts[i].split(" ")[1]);
                	cas.setString(3, casts[i].split(" ")[2]);
                	cas.executeUpdate();
        		}
        		PreparedStatement crewdir = con.prepareStatement("INSERT INTO CrewMember(PeopleInvolved_ID, MovieName, ReleaseYear, Role_ID)"
        				+ "VALUES(?,?,?,?)");
            	PreparedStatement dirid = con.prepareStatement("SELECT * FROM PeopleInvolved WHERE FirstName = ?"
            			+ " AND FamilyName = ?");
            	dirid.setString(1, casts[i].split(" ")[0]);
            	dirid.setString(2, casts[i].split(" ")[1]);
            	ResultSet diridrs = dirid.executeQuery();
            	String id = "0";
            	if (diridrs.next()) {
            		id = diridrs.getString("ID");
            	}
        		crewdir.setString(1, id);
        		crewdir.setString(2, movieName.getText());
        		crewdir.setString(3, movYear.getText());
        		crewdir.setString(4, "1");
        		crewdir.executeUpdate();
    		}
    		JOptionPane.showMessageDialog(null, "Movie Data Inserted");
    		movieName.setText("");
    		director.setText("");
    		script.setText("");
    		mProducer.setText("");
    		composer.setText("");
    		editor.setText("");
    		costume.setText("");
    		cast.setText("");
    		movYear.setText("");
            parentPanel.removeAll();
            parentPanel.add(cover);
            parentPanel.repaint();
            parentPanel.revalidate();
    	}
    	catch (SQLException e) {
			JOptionPane.showMessageDialog(null, e);
    	}
    }//GEN-LAST:event_movSubmitActionPerformed

    private void movCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_movCancelActionPerformed
        parentPanel.removeAll();
        parentPanel.add(cover);
        parentPanel.repaint();
        parentPanel.revalidate();
    }//GEN-LAST:event_movCancelActionPerformed
    
    /* 
    ---
    View
    ---
    */
    String radio = "none";
    private void viewSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewSubmitActionPerformed
        String name = viewName.getText();
        String year = viewYear.getText();
        if (name != null && year != null) {
            reportName.setText("");
            reportYear.setText("");
            reportType.setText("");
            reportAuthor.setText("");
            try {
                Connection con = getConnection();
                if (radio == "book") {
                    PreparedStatement book = con.prepareStatement("SELECT * FROM Book WHERE Title = ? AND YearOfPublication = ?");
                    book.setString(1, name);
                    book.setString(2, year);
                    ResultSet rs = book.executeQuery();
                    if (rs.next()) {
                        reportName.setText(name);
                        reportYear.setText(year);
                        reportType.setText("B");
                        PreparedStatement id = con.prepareStatement("SELECT * FROM BookAuthor WHERE ISBN = ?");
            		id.setString(1, rs.getString("ISBN"));
            		ResultSet rs2 = id.executeQuery();
            		String author_list = "";
            		while (rs2.next()) {
            			String aid = rs2.getString("Author_ID");
            			PreparedStatement author = con.prepareStatement("SELECT * FROM PeopleInvolved WHERE ID = ?");
            			author.setString(1, aid);
            			ResultSet rs3 = author.executeQuery();
            			if (rs3.next()) {
            				author_list += (rs3.getString("FirstName") + " " + rs3.getString("FamilyName") + ";");
            			}
            		}
            		reportAuthor.setText(author_list);
                    }
                }
                else if (radio == "music") {
                    PreparedStatement music = con.prepareStatement("SELECT * FROM Music WHERE AlbumName = ? AND Year = ?");
                    music.setString(1, name);
                    music.setString(2, year);
                    ResultSet rs = music.executeQuery();
                    if (rs.next()) {
                        reportName.setText(name);
                        reportYear.setText(year);
                        reportType.setText("M");
                        PreparedStatement id = con.prepareStatement("SELECT * FROM MusicSinger WHERE AlbumName = ? AND Year = ?");
            		id.setString(1, name);
            		id.setString(2, year);
            		ResultSet rs2 = id.executeQuery();
            		String author_list = "";
            		while (rs2.next()) {
            			String aid = rs2.getString("PeopleInvolved_ID");
            			PreparedStatement author = con.prepareStatement("SELECT * FROM PeopleInvolved WHERE ID = ?");
            			author.setString(1, aid);
            			ResultSet rs3 = author.executeQuery();
            			if (rs3.next()) {
            				author_list += (rs3.getString("FirstName") + " " + rs3.getString("FamilyName") + ";");
            			}
            		}
            		reportAuthor.setText(author_list);
                    }
                }
                else if (radio == "movie") {
                    PreparedStatement movie = con.prepareStatement("SELECT * FROM Movie WHERE MovieName = ? AND Year = ?");
                    movie.setString(1, name);
                    movie.setString(2, year);
                    ResultSet rs = movie.executeQuery();
                    if (rs.next()) {
                        reportName.setText(name);
                        reportYear.setText(year);
                        reportType.setText("F");
                        PreparedStatement id = con.prepareStatement("SELECT * FROM CrewMember WHERE MovieName = ? and Role_ID = ?");
                        id.setString(1, name);
                        id.setString(2, "2");
            		ResultSet rs2 = id.executeQuery();
            		String author_list = "";
            		while (rs2.next()) {
            			String aid = rs2.getString("PeopleInvolved_ID");
            			PreparedStatement author = con.prepareStatement("SELECT * FROM PeopleInvolved WHERE ID = ?");
            			author.setString(1, aid);
            			ResultSet rs3 = author.executeQuery();
            			if (rs3.next()) {
            				author_list += (rs3.getString("FirstName") + " " + rs3.getString("FamilyName") + ";");
            			}
            		}
            		reportAuthor.setText(author_list);
                    }
                }
            }
            catch (SQLException e) {
                JOptionPane.showMessageDialog(null, e);
            }
        }
    }//GEN-LAST:event_viewSubmitActionPerformed

    private void viewCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewCancelActionPerformed
        reportName.setText("");
        reportYear.setText("");
        reportType.setText("");
        reportAuthor.setText("");
        parentPanel.removeAll();
        parentPanel.add(cover);
        parentPanel.repaint();
        parentPanel.revalidate();
    }//GEN-LAST:event_viewCancelActionPerformed

    private void bookRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookRadioActionPerformed
        radio = "book";
        reportName.setText("");
        reportYear.setText("");
        reportType.setText("");
        reportAuthor.setText("");
    }//GEN-LAST:event_bookRadioActionPerformed

    private void musicRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_musicRadioActionPerformed
        radio = "music";
        reportName.setText("");
        reportYear.setText("");
        reportType.setText("");
        reportAuthor.setText("");
    }//GEN-LAST:event_musicRadioActionPerformed

    private void movieRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_movieRadioActionPerformed
        radio = "movie";
        reportName.setText("");
        reportYear.setText("");
        reportType.setText("");
        reportAuthor.setText("");
    }//GEN-LAST:event_movieRadioActionPerformed

    /* 
    ---
    report 1
    ---
    */
    private void R1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_R1ActionPerformed
    	String name = JOptionPane.showInputDialog(null, "Enter author's name(firstname + space + familyname)");
    	if (name != null) {
    		try {
    			Connection con = getConnection();
    			PreparedStatement book = con.prepareStatement("SELECT ISBN, Title, YearOfPublication FROM Book WHERE ISBN IN "
    					+ "(SELECT ISBN FROM BookAuthor WHERE Author_ID IN "
    					+ "(SELECT ID FROM PeopleInvolved WHERE FirstName = ? AND FamilyName = ?)"
    					+ "ORDER BY ISBN)");
    			book.setString(1, name.split(" ")[0]);
    			book.setString(2, name.split(" ")[1]);
    			ResultSet rs = book.executeQuery();
    			String text = "";
    			while (rs.next()) {
    				text += ("ISBN: " + rs.getString("ISBN") + "; "
    						+ "Book's Name: " + rs.getString("Title") + "; "
    						+ "Published Year: " + rs.getString("YearOfPublication"));
    				text += '\n';
    				text += '\n';
    			}
    			reportField.setText(text);
    	        parentPanel.removeAll();
    	        parentPanel.add(ReportPanel);
    	        parentPanel.repaint();
    	        parentPanel.revalidate();
    			
    		}
    		catch (SQLException e) {
    			JOptionPane.showMessageDialog(null, e);
    		}
    	}
    }//GEN-LAST:event_R1ActionPerformed

    /* 
    ---
    report 2
    ---
    */
    private void R2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_R2ActionPerformed
    	String year = JOptionPane.showInputDialog(null, "Enter published year");
    	if (year != null) {
    		try {
    			Connection con = getConnection();
    			PreparedStatement book = con.prepareStatement("SELECT Book.ISBN, Title, YearOfPublication, FirstName, FamilyName "
    					+ "FROM Book JOIN "
    					+ "(SELECT * FROM BookAuthor JOIN PeopleInvolved WHERE BookAuthor.Author_ID = PeopleInvolved.ID) AS helper "
    					+ "WHERE YearOfPublication = ? "
    					+ "AND Book.ISBN = helper.ISBN "
    					+ "ORDER BY Title");
    			book.setString(1, year);
    			ResultSet rs = book.executeQuery();
    			String text = "";
    			while (rs.next()) {
    				text += ("ISBN: " + rs.getString("ISBN") + "; "
    						+ "Book's Name: " + rs.getString("Title") + "; "
    						+ "Published Year: " + rs.getString("YearOfPublication") + '\n'
    						+ "First Name: " + rs.getString("FirstName").split("")[0] + "; "
    						+ "Family Name: " + rs.getString("FamilyName"));
    				text += '\n';
    				text += '\n';
    			}
    			reportField.setText(text);
    	        parentPanel.removeAll();
    	        parentPanel.add(ReportPanel);
    	        parentPanel.repaint();
    	        parentPanel.revalidate();
    			
    		}
    		catch (SQLException e) {
    			JOptionPane.showMessageDialog(null, e);
    		}
    	}
    }//GEN-LAST:event_R2ActionPerformed

    /* 
    ---
    report 3
    ---
    */
    private void R3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_R3ActionPerformed
    	String key = JOptionPane.showInputDialog(null, "Enter keyword or book's name");
    	if (key != null) {
    		try {
    			Connection con = getConnection();
    			PreparedStatement name = con.prepareStatement("SELECT ISBN, Title, YearOfPublication FROM Book WHERE Title = ? ORDER BY ISBN");
    			name.setString(1, key);
    			ResultSet namers = name.executeQuery();
				String text = "";
    			if (!namers.next()) {
    				PreparedStatement book = con.prepareStatement("SELECT ISBN, Title, YearOfPublication FROM Book WHERE ISBN IN "
    						+ "(SELECT ISBN FROM "
    						+ "(SELECT * FROM BookKeyword JOIN Keyword WHERE BookKeyword.Keyword_ID = Keyword.ID) AS helper WHERE Tag = ?) "
    						+ "ORDER BY ISBN");
    				book.setString(1, key);
    				ResultSet rs = book.executeQuery();
    				while (rs.next()) {
    					text += ("ISBN: " + rs.getString("ISBN") + "; "
    							+ "Book's Name: " + rs.getString("Title") + "; "
    							+ "Published Year: " + rs.getString("YearOfPublication"));
    					text += '\n';
    				}
        			reportField.setText(text);
    			}
    			else {
					text += ("ISBN: " + namers.getString("ISBN") + "; "
							+ "Book's Name: " + namers.getString("Title") + "; "
							+ "Published Year: " + namers.getString("YearOfPublication"));
					text += '\n';
    				while (namers.next()) {
    					text += ("ISBN: " + namers.getString("ISBN") + "; "
    							+ "Book's Name: " + namers.getString("Title") + "; "
    							+ "Published Year: " + namers.getString("YearOfPublication"));
    					text += '\n';
    				}
    				reportField.setText(text);
    			}
    			reportField.setText(text);
    	        parentPanel.removeAll();
    	        parentPanel.add(ReportPanel);
    	        parentPanel.repaint();
    	        parentPanel.revalidate();
    			
    		}
    		catch (SQLException e) {
    			JOptionPane.showMessageDialog(null, e);
    		}
    	}
    }//GEN-LAST:event_R3ActionPerformed

    /* 
    ---
    report 4
    ---
    */
    private void R4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_R4ActionPerformed
		try {
			Connection con = getConnection();
			PreparedStatement book = con.prepareStatement("SELECT Book.ISBN, Title, YearOfPublication, FirstName, FamilyName "
					+ "FROM Book JOIN "
					+ "(SELECT * FROM BookAuthor JOIN PeopleInvolved WHERE BookAuthor.Author_ID = PeopleInvolved.ID) AS helper "
					+ "WHERE Book.ISBN = helper.ISBN "
					+ "ORDER BY FamilyName, FirstName");
			ResultSet rs = book.executeQuery();
			String text = "";
			while (rs.next()) {
				text += ("ISBN: " + rs.getString("ISBN") + "; "
						+ "Book's Name: " + rs.getString("Title") + "; "
						+ "Published Year: " + rs.getString("YearOfPublication") + '\n'
						+ "First Name: " + rs.getString("FirstName") + "; "
						+ "Family Name: " + rs.getString("FamilyName"));
				text += '\n';
				text += '\n';
			}
			reportField.setText(text);
	        parentPanel.removeAll();
	        parentPanel.add(ReportPanel);
	        parentPanel.repaint();
	        parentPanel.revalidate();
			
		}
		catch (SQLException e) {
			JOptionPane.showMessageDialog(null, e);
		}
    }//GEN-LAST:event_R4ActionPerformed

    /* 
    ---
    report 5
    ---
    */
    private void R5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_R5ActionPerformed
		try {
			Connection con = getConnection();
			PreparedStatement book = con.prepareStatement("SELECT Tag, Count(*) AS Frequency "
					+ "FROM BookKeyword JOIN Keyword WHERE BookKeyword.Keyword_ID = Keyword.ID "
					+ "GROUP BY Tag HAVING Count(*) > 1 ORDER BY Frequency LIMIT 1");
			ResultSet rs = book.executeQuery();
			String text = "";
			while (rs.next()) {
				text += ("Tag: " + rs.getString("Tag") + "; "
						+ "Frequency: " + rs.getString("Frequency"));
				text += '\n';
				text += '\n';
			}
			reportField.setText(text);
	        parentPanel.removeAll();
	        parentPanel.add(ReportPanel);
	        parentPanel.repaint();
	        parentPanel.revalidate();
			
		}
		catch (SQLException e) {
			JOptionPane.showMessageDialog(null, e);
		}
    }//GEN-LAST:event_R5ActionPerformed

    /* 
    ---
    report 6
    ---
    */
    private void R6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_R6ActionPerformed
		try {
			Connection con = getConnection();
			PreparedStatement book = con.prepareStatement("SELECT PeopleInvolved_ID, COUNT(PeopleInvolved_ID) AS "
					+ "Frequency FROM CrewMember GROUP BY PeopleInvolved_ID HAVING Frequency > 1");
			ResultSet rs = book.executeQuery();
			String text = "";
			while (rs.next()) {
				String id = rs.getString("PeopleInvolved_ID");
				PreparedStatement info = con.prepareStatement("SELECT FamilyName, MovieName, Description FROM PeopleInvolved JOIN "
						+ "(SELECT PeopleInvolved_ID, MovieName, Role_ID, Description FROM CrewMember "
						+ "JOIN Role WHERE CrewMember.Role_ID = Role.ID ORDER BY PeopleInvolved_ID) AS helper "
						+ "WHERE PeopleInvolved.ID = helper.PeopleInvolved_ID AND PeopleInvolved.ID = ?");
				info.setString(1, id);
				ResultSet infors = info.executeQuery();
				while (infors.next()) {
					text += ("Family Name: " + infors.getString("FamilyName") + "; "
							+ "Role: " + infors.getString("Description") + "; "
							+ "Movie Name: " + infors.getString("MovieName"));
					text += '\n';
					text += '\n';
				}
			}
			reportField.setText(text);
	        parentPanel.removeAll();
	        parentPanel.add(ReportPanel);
	        parentPanel.repaint();
	        parentPanel.revalidate();
			
		}
		catch (SQLException e) {
			JOptionPane.showMessageDialog(null, e);
		}
    }//GEN-LAST:event_R6ActionPerformed

    /* 
    ---
    report 7
    ---
    */
    private void R7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_R7ActionPerformed
		try {
			Connection con = getConnection();
			PreparedStatement book = con.prepareStatement("SELECT * FROM Award JOIN PeopleInvolved "
					+ "WHERE Award.PeopleInvolved_ID = PeopleInvolved.ID ORDER BY FirstName, FamilyName");
			ResultSet rs = book.executeQuery();
			String text = "";
			while (rs.next()) {
				text += ("Movie Name: " + rs.getString("MovieName") + '\n'
						+ "Director's First Name: " + rs.getString("FirstName") + "; "
						+ "Director's Family Name: " + rs.getString("FamilyName") + '\n'
						+ "Number of Awards: " + rs.getString("Award"));
				text += '\n';
				text += '\n';
			}
			reportField.setText(text);
	        parentPanel.removeAll();
	        parentPanel.add(ReportPanel);
	        parentPanel.repaint();
	        parentPanel.revalidate();
			
		}
		catch (SQLException e) {
			JOptionPane.showMessageDialog(null, e);
		}
    }//GEN-LAST:event_R7ActionPerformed

    /* 
    ---
    report 8
    ---
    */
    private void R8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_R8ActionPerformed
		try {
			Connection con = getConnection();
			PreparedStatement book = con.prepareStatement("SELECT MusicName, COUNT(MusicName) AS "
					+ "Counter FROM Music GROUP BY MusicName HAVING Counter > 1");
			ResultSet rs = book.executeQuery();
			String text = "";
			while (rs.next()) {
				String id = rs.getString("MusicName");
				PreparedStatement info = con.prepareStatement("SELECT MusicSinger.AlbumName, MusicSinger.MusicName, MusicSinger.Year, PeopleInvolved.FirstName, PeopleInvolved.FamilyName "
						+ "FROM MusicSinger JOIN PeopleInvolved WHERE MusicSinger.PeopleInvolved_ID = PeopleInvolved.ID AND MusicName = ? "
						+ "ORDER BY MusicName, Year");
				info.setString(1, id);
				ResultSet infors = info.executeQuery();
				while (infors.next()) {
					text += ("Album Name: " + infors.getString("AlbumName") + "; "
							+ "Music Name: " + infors.getString("MusicName") + '\n'
							+ "Year: " + infors.getString("Year") + "; "
							+ "Singer First Name: " + infors.getString("FirstName") + "; "
							+ "Singer Family Name: " + infors.getString("FamilyName"));
					text += '\n';
					text += '\n';
				}
			}
			reportField.setText(text);
	        parentPanel.removeAll();
	        parentPanel.add(ReportPanel);
	        parentPanel.repaint();
	        parentPanel.revalidate();
			
		}
		catch (SQLException e) {
			JOptionPane.showMessageDialog(null, e);
		}
    }//GEN-LAST:event_R8ActionPerformed

    /* 
    ---
    report 9
    ---
    */
    private void R9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_R9ActionPerformed
		try {
			Connection con = getConnection();
			PreparedStatement book = con.prepareStatement("SELECT AlbumName, Year, MusicName, FirstName, FamilyName FROM PeopleInvolvedMusic "
					+ "JOIN PeopleInvolved WHERE "
					+ "PeopleInvolvedMusic.PeopleInvolved_ID = PeopleInvolved.ID and IsSongwriter = 1 or PeopleInvolvedMusic.PeopleInvolved_ID = PeopleInvolved.ID and IsComposer = 1 "
					+ "ORDER BY Year, MusicName");
			ResultSet rs = book.executeQuery();
			String text = "";
			while (rs.next()) {
				text += ("Album Name: " + rs.getString("AlbumName") + "; "
						+ "Music Name: " + rs.getString("MusicName") + '\n'
						+ "Year: " + rs.getString("Year") + "; "
						+ "Singer First Name: " + rs.getString("FirstName") + "; "
						+ "Singer Family Name: " + rs.getString("FamilyName"));
				text += '\n';
				text += '\n';
			}
			reportField.setText(text);
	        parentPanel.removeAll();
	        parentPanel.add(ReportPanel);
	        parentPanel.repaint();
	        parentPanel.revalidate();
			
		}
		catch (SQLException e) {
			JOptionPane.showMessageDialog(null, e);
		}
    }//GEN-LAST:event_R9ActionPerformed

    /* 
    ---
    report 10
    ---
    */
    private void R10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_R10ActionPerformed
		try {
			Connection con = getConnection();
			PreparedStatement book = con.prepareStatement("SELECT FamilyName, COUNT(FamilyName) AS Counter "
					+ "FROM PeopleInvolved GROUP BY FamilyName HAVING Counter > 2 ORDER BY FamilyName");
			ResultSet rs = book.executeQuery();
			String text = "";
			while (rs.next()) {
				text += ("Family Name: " + rs.getString("FamilyName"));
				text += '\n';
			}
			reportField.setText(text);
	        parentPanel.removeAll();
	        parentPanel.add(ReportPanel);
	        parentPanel.repaint();
	        parentPanel.revalidate();
			
		}
		catch (SQLException e) {
			JOptionPane.showMessageDialog(null, e);
		}
    }//GEN-LAST:event_R10ActionPerformed

    private void reportCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reportCancelActionPerformed
        parentPanel.removeAll();
        parentPanel.add(cover);
        parentPanel.repaint();
        parentPanel.revalidate();
    }//GEN-LAST:event_reportCancelActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HL_tanjiaxi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HL_tanjiaxi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HL_tanjiaxi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HL_tanjiaxi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new HL_tanjiaxi().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem BookMenu;
    private javax.swing.JPanel BookPanel;
    private javax.swing.JMenu DataMenu;
    private javax.swing.JTextField ISBN;
    private javax.swing.JLabel ISBNLabel;
    private javax.swing.JMenu InsertMenu;
    private javax.swing.JMenuBar MenuBar;
    private javax.swing.JMenuItem MovieMenu;
    private javax.swing.JPanel MoviePanel;
    private javax.swing.JMenuItem MusicMenu;
    private javax.swing.JPanel MusicPanel;
    private javax.swing.JMenuItem R1;
    private javax.swing.JMenuItem R10;
    private javax.swing.JMenuItem R2;
    private javax.swing.JMenuItem R3;
    private javax.swing.JMenuItem R4;
    private javax.swing.JMenuItem R5;
    private javax.swing.JMenuItem R6;
    private javax.swing.JMenuItem R7;
    private javax.swing.JMenuItem R8;
    private javax.swing.JMenuItem R9;
    private javax.swing.JMenuItem RemoveMenu;
    private javax.swing.JMenu ReportMenu;
    private javax.swing.JPanel ReportPanel;
    private javax.swing.JMenuItem UpdateMenu;
    private javax.swing.JMenuItem View;
    private javax.swing.JMenu ViewMenu;
    private javax.swing.JPanel ViewPanel;
    private javax.swing.JTextField arrangement;
    private javax.swing.JLabel authorLabel;
    private javax.swing.JTextField authors;
    private javax.swing.JButton bCancel;
    private javax.swing.JButton bSubmit;
    private javax.swing.JTextField bYear;
    private javax.swing.JLabel bookLabel;
    private javax.swing.JTextField bookName;
    private javax.swing.JRadioButton bookRadio;
    private javax.swing.ButtonGroup buttonGroup;
    private javax.swing.JTextField cast;
    private javax.swing.JLabel castLabel;
    private javax.swing.JTextField composer;
    private javax.swing.JLabel composerLabel;
    private javax.swing.JTextField costume;
    private javax.swing.JLabel costumeLabel;
    private javax.swing.JPanel cover;
    private javax.swing.JLabel coverAuthor;
    private javax.swing.JLabel coverName;
    private javax.swing.JTextArea description;
    private javax.swing.JLabel descriptionLabel;
    private javax.swing.JTextField director;
    private javax.swing.JLabel directorLabel;
    private javax.swing.JTextField diskComposer;
    private javax.swing.JTextField diskName;
    private javax.swing.JLabel diskNameLabel;
    private javax.swing.JTextField diskProducer;
    private javax.swing.JTextField diskType;
    private javax.swing.JLabel diskTypeLabel;
    private javax.swing.JLabel editionLabel;
    private javax.swing.JTextField editonNum;
    private javax.swing.JTextField editor;
    private javax.swing.JLabel editorLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel keywordLabel;
    private javax.swing.JTextArea keywords;
    private javax.swing.JTextField lyrics;
    private javax.swing.JLabel lyricsLabel;
    private javax.swing.JTextField mProducer;
    private javax.swing.JButton micCancel;
    private javax.swing.JLabel micPYearLabel;
    private javax.swing.JLabel micPYearLabel1;
    private javax.swing.JButton micSubmit;
    private javax.swing.JTextField micYear;
    private javax.swing.JButton movCancel;
    private javax.swing.JButton movSubmit;
    private javax.swing.JTextField movYear;
    private javax.swing.JTextField movieName;
    private javax.swing.JLabel movieNameLabel;
    private javax.swing.JRadioButton movieRadio;
    private javax.swing.JRadioButton musicRadio;
    private javax.swing.JLabel pYearLabel;
    private javax.swing.JLabel pageLabel;
    private javax.swing.JTextField pageNum;
    private javax.swing.JPanel parentPanel;
    private javax.swing.JLabel producerLabel;
    private javax.swing.JLabel publisherLabel;
    private javax.swing.JTextField publisherName;
    private javax.swing.JLabel releaseLabel;
    private javax.swing.JTextField reportAuthor;
    private javax.swing.JButton reportCancel;
    private javax.swing.JTextArea reportField;
    private javax.swing.JTextField reportName;
    private javax.swing.JTextField reportType;
    private javax.swing.JTextField reportYear;
    private javax.swing.JTextField script;
    private javax.swing.JLabel scriptLabel;
    private javax.swing.JTextField singer;
    private javax.swing.JTextField songWriter;
    private javax.swing.JLabel songWriterLabel;
    private javax.swing.JLabel songWriterLabel1;
    private javax.swing.JLabel songWriterLabel2;
    private javax.swing.JLabel songWriterLabel3;
    private javax.swing.JLabel trackLabel;
    private javax.swing.JTextField trackName;
    private javax.swing.JButton viewCancel;
    private javax.swing.JTextField viewName;
    private javax.swing.JLabel viewNameLabel;
    private javax.swing.JLabel viewPubYearLabel;
    private javax.swing.JLabel viewPubYearLabel1;
    private javax.swing.JLabel viewPubYearLabel2;
    private javax.swing.JLabel viewPubYearLabel3;
    private javax.swing.JLabel viewPubYearLabel4;
    private javax.swing.JButton viewSubmit;
    private javax.swing.JTextField viewYear;
    // End of variables declaration//GEN-END:variables
}
